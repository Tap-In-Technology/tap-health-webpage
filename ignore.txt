{
  "name": "tap-health-webpage",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "start": "serve .",
    "build": "mkdir -p build && cp -r index.html styles media typewriter.js build"
  },
  "dependencies": {
    "aos": "^2.3.4",
    "autoprefixer": "^10.4.2",
    "postcss": "^8.4.5",
    "process": "^0.11.10",
    "react-scripts": "^5.0.1",
    "tailwindcss": "^2.2.19"
  },
  "devDependencies": {
    "typescript": "^4.4.4"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}




const MenuHandler = (flag) => {
    if (flag) {
        document.getElementById("list").classList.add("top-100");
        document.getElementById("list").classList.remove("hidden");
        document.getElementById("close").classList.remove("hidden");
        document.getElementById("open").classList.add("hidden");
    } else {
        document.getElementById("list").classList.remove("top-100");
        document.getElementById("list").classList.add("hidden");
        document.getElementById("close").classList.add("hidden");
        document.getElementById("open").classList.remove("hidden");
    }
};
// slider js starts

let slides = document.querySelectorAll(".slide-ana>div");
let slideSayisi = slides.length;

let prev = document.getElementById("prev");
let next = document.getElementById("next");
for (let index = 0; index < slides.length; index++) {
    const element = slides[index];
    element.style.transform = "translateX(" + 100 * index + "%)";
}
let loop = 0 + 1000 * slideSayisi;

function goNext() {
    loop++;
    for (let index = 0; index < slides.length; index++) {
        const element = slides[index];
        element.style.transform = "translateX(" + 100 * (index - (loop % slideSayisi)) + "%)";
    }
}

function goPrev() {
    loop--;
    for (let index = 0; index < slides.length; index++) {
        const element = slides[index];
        element.style.transform = "translateX(" + 100 * (index - (loop % slideSayisi)) + "%)";
    }
}

next.addEventListener("click", goNext);
prev.addEventListener("click", goPrev);
document.addEventListener("keydown", function (e) {
    if (e.code === "ArrowRight") {
        goNext();
    } else if (e.code === "ArrowLeft") {
        goPrev();
    }
});


preview 9Rn0avGpMeWEMaE7CoLmFc_5uLpuHukkOy6txgxNP5c







<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tap Health - Create Company</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="favicon.ico" />
  <style>
    .loading {
      display: none;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto py-12 px-4">
    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-6">Create a New Company</h1>
      
      <form id="companyForm" class="space-y-6">
        <div>
          <label class="block text-gray-700 font-medium mb-2">Company Name:</label>
          <input type="text" name="companyName" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500">
        </div>
        
        <div>
          <label class="block text-gray-700 font-medium mb-2">Description:</label>
          <textarea name="description" required rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"></textarea>
        </div>
        
        <!--
        <div>
          <label class="block text-gray-700 font-medium mb-2">Form Name:</label>
          <input type="text" name="formName" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500">
        </div>-->
        
        <div>
          <button type="submit" class="w-full bg-red-700 text-white py-3 px-4 rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
            Create Company
          </button>
          <div class="loading text-center mt-4" id="loadingIndicator">
            <div class="inline-block animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-red-700"></div>
            <p class="text-gray-600 mt-2">Creating company...</p>
          </div>
        </div>
        
        <div id="resultMessage" class="hidden py-3 px-4 rounded-md text-center"></div>
      </form>
      
      <div class="mt-6 text-center">
        <a href="index.html" class="bg-black hover:text-red-600 underline">Back to Home</a>
      </div>
    </div>
  </div>

  <script>
    const form = document.getElementById('companyForm');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const resultMessage = document.getElementById('resultMessage');
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Show loading indicator
      loadingIndicator.style.display = 'block';
      resultMessage.classList.add('hidden');
      
      const formData = new FormData(form);
      const data = {
        companyName: formData.get('companyName'),
        description: formData.get('description')
       // formName: formData.get('formName')
      };

      try {
        console.log('Sending data to server:', data);
        const response = await fetch('/.netlify/functions/submit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        // Log raw response for debugging
        const responseText = await response.text();
        console.log('Raw response:', responseText);
        
        // Hide loading indicator
        loadingIndicator.style.display = 'none';
        
        if (response.ok) {
          try {
            // Try parsing the JSON
            const result = JSON.parse(responseText);
            // Show success message
            resultMessage.classList.remove('hidden');
            resultMessage.classList.add('bg-green-100', 'text-green-800');
            resultMessage.innerText = 'Company created successfully!';
            form.reset();
          } catch (parseError) {
            console.error('Error parsing JSON response:', parseError);
            // Show error message
            resultMessage.classList.remove('hidden');
            resultMessage.classList.add('bg-yellow-100', 'text-yellow-800');
            resultMessage.innerText = `Response received but couldn't parse JSON. Raw response: ${responseText.substring(0, 100)}...`;
          }
        } else {
          try {
            // Try parsing the error JSON
            const errorData = JSON.parse(responseText);
            // Show error message
            resultMessage.classList.remove('hidden');
            resultMessage.classList.add('bg-red-100', 'text-red-800');
            resultMessage.innerText = `Error: ${errorData.error || 'Failed to create company'}`;
          } catch (parseError) {
            // Show raw error text if parsing fails
            resultMessage.classList.remove('hidden');
            resultMessage.classList.add('bg-red-100', 'text-red-800');
            resultMessage.innerText = `Error: Status ${response.status}. Raw response: ${responseText.substring(0, 100)}...`;
          }
        }
      } catch (error) {
        console.error('Network or other error:', error);
        // Hide loading indicator
        loadingIndicator.style.display = 'none';
        
        // Show error message
        resultMessage.classList.remove('hidden');
        resultMessage.classList.add('bg-red-100', 'text-red-800');
        resultMessage.innerText = `Error: ${error.message || 'Something went wrong'}`;
      }
    });
  </script>
</body>
</html>


const { createClient } = require('contentful-management');
require('dotenv').config();

exports.handler = async function(event, context) {
  // Enable CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Content-Type': 'application/json'
  };
  
  console.log('Function started');
  console.log('Environment variables available:', {
    SPACE_ID: process.env.CONTENTFUL_SPACE_ID ? 'Set' : 'Not set',
    TOKEN: process.env.CONTENTFUL_MANAGEMENT_TOKEN ? 'Set' : 'Not set',
    ENV: process.env.CONTENTFUL_ENVIRONMENT || 'master'
  });
  
  // Handle OPTIONS request (CORS preflight)
  if (event.httpMethod === 'OPTIONS') {
    console.log('Handling OPTIONS request');
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ message: 'Successful preflight call' })
    };
  }
  
  try {
    console.log('Raw request body:', event.body);
    const body = JSON.parse(event.body);
    console.log('Parsed request body:', body);
    
    const { companyName, description } = body;
    console.log('Extracted fields:', { companyName, description });
    
    if (!companyName || !description) {
      console.error('Missing required fields');
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          error: 'Missing required fields',
          details: 'Both companyName and description are required'
        })
      };
    }
    
    // Initialize Contentful client
    console.log('Initializing Contentful client');
    const contentfulClient = createClient({
      accessToken: process.env.CONTENTFUL_MANAGEMENT_TOKEN
    });
    console.log('Client initialized');
    
    // Get space and environment
    console.log(`Connecting to space: ${process.env.CONTENTFUL_SPACE_ID}`);
    const space = await contentfulClient.getSpace(process.env.CONTENTFUL_SPACE_ID);
    console.log('Connected to space');
    
    console.log(`Getting environment: ${process.env.CONTENTFUL_ENVIRONMENT || 'master'}`);
    const environment = await space.getEnvironment(process.env.CONTENTFUL_ENVIRONMENT || 'master');
    console.log('Retrieved environment');
    
    // Use existing form ID
    const EXISTING_FORM_ID = "7dT9dxsmMOtyBbujasLGMn";
    console.log(`Using existing form ID: ${EXISTING_FORM_ID}`);
    
    // Check if form exists first
    try {
      console.log('Verifying form exists...');
      const formEntry = await environment.getEntry(EXISTING_FORM_ID);
      console.log('Form exists:', formEntry.sys.id);
    } catch (formError) {
      console.error('Error checking form:', formError);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({
          error: 'Invalid form reference',
          details: `Form with ID ${EXISTING_FORM_ID} could not be found: ${formError.message}`
        })
      };
    }
    
    // Create company entry
    const companyPayload = {
      fields: {
        name: { 'en-US': companyName },
        description: { 'en-US': description },
        form: { 
          'en-US': { 
            sys: { type: 'Link', linkType: 'Entry', id: EXISTING_FORM_ID } 
          }
        }
      }
    };
    
    console.log('Company payload:', JSON.stringify(companyPayload, null, 2));
    console.log('Creating company entry...');
    const companyEntry = await environment.createEntry('company', companyPayload);
    console.log('Company created with ID:', companyEntry.sys.id);
    
    // Skip publishing - entry will be saved as draft
    // console.log('Publishing company...');
    // await companyEntry.publish();
    // console.log('Company published successfully');
    
    const responseData = {
      message: 'Company created successfully (draft)',
      companyId: companyEntry.sys.id
    };
    console.log('Sending success response:', responseData);
    
    return {
      statusCode: 201,
      headers,
      body: JSON.stringify(responseData)
    };
    
  } catch (error) {
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack,
      details: error.details || 'No additional details'
    });
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: 'Failed to create company',
        details: error.message,
        errorName: error.name,
        stackTrace: process.env.NODE_ENV !== 'production' ? error.stack : undefined
      })
    };
  }
};






